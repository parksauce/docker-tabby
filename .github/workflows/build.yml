name: Build and Push Docker Hub & GitHub Container Repository

on:
  push:
    paths:
      - 'params/VERSION'
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Get Variables
        run: |
            echo containerName=$(cat params/NAME) >> "$GITHUB_ENV"
            echo version=$(cat params/VERSION) >> "$GITHUB_ENV"
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: amd64,arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build for amd64
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: amd64
          push: false
          pull: true
          load: true
          tags: ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:amd64, ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:amd64-${{ env.version }}
          build-args: TABBY_VERSION=${{ env.version }}
      
      - name: Build for arm64
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: arm64
          push: false
          pull: true
          load: true
          tags: ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:arm64, ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:arm64-${{ env.version }}
          build-args: TABBY_VERSION=${{ env.version }}
     
      - name: Make Manifests
        run: |

            # Make version manifest
            docker manifest create --amend \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:${{ env.version }} \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:amd64-${{ env.version }} \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:arm64-${{ env.version }}

            # Make latest manifest
            docker manifest create --amend \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:latest \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:amd64 \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:arm64

      - name: Push to docker.io
        run: |

            # Push version containers to docker.io
            docker push ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:amd64-${{ env.version }} 
            docker push ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:arm64-${{ env.version }}
            docker manifest push ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:${{ env.version }}

            # Push latest containers to docker.io
            docker push ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:amd64 
            docker push ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:arm64
            docker manifest push ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:latest
      
      - name: Cleanup
        run: |

            # Remove manifests
            docker manifest rm \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:latest \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:${{ env.version }} 

            # Remove containers
            docker image rm \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:amd64 \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:arm64 \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:amd64-${{ env.version }} \
            ${{ secrets.DOCKER_USER }}/${{ env.containerName }}:arm64-${{ env.version }} 

            docker image prune -af
